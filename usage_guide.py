#!/usr/bin/env python3
"""
개선된 Factor Factory 사용법 가이드
"""

def print_usage_guide():
    """사용법 가이드 출력"""
    
    print("=" * 80)
    print("🚀 FACTOR FACTORY v2.1 ENHANCED - 사용법 가이드")
    print("=" * 80)
    
    print("\n📊 1. 기존 프로그램 평가 (차트 포함)")
    print("=" * 50)
    print("# 기본 평가")
    print("python -m factor_factory.scripts.cli_rlc_eval \\")
    print("  --program models/best_program.json \\")
    print("  --symbol BTCUSDT --interval 1h \\")
    print("  --outdir results")
    print("")
    print("# 차트 포함 평가")
    print("python -m factor_factory.scripts.cli_rlc_eval \\")
    print("  --program models/best_program.json \\")
    print("  --symbol BTCUSDT --interval 1h \\")
    print("  --outdir results \\")
    print("  --charts \\")
    print("  --chart_dir trading_charts")
    
    print("\n🤖 2. 새로운 모델 훈련")
    print("=" * 50)
    print("# 개선된 설정으로 훈련")
    print("python -m factor_factory.scripts.cli_rlc_train \\")
    print("  --symbol BTCUSDT --interval 1h \\")
    print("  --timesteps 100000 \\")
    print("  --save models/ppo_v2.zip \\")
    print("  --eval_stride 2 \\")
    print("  --max_eval_bars 15000 \\")
    print("  --long_threshold 1.5 \\")
    print("  --short_threshold -1.5 \\")
    print("  --rolling_window 252")
    
    print("\n🔍 3. 최적 프로그램 탐색")
    print("=" * 50)
    print("# 모델에서 최적 프로그램 찾기")
    print("python -m factor_factory.scripts.cli_rlc_infer \\")
    print("  --model models/ppo_v2.zip \\")
    print("  --symbol BTCUSDT --interval 1h \\")
    print("  --tries 512 \\")
    print("  --outdir best_results \\")
    print("  --eval_stride 2 \\")
    print("  --max_eval_bars 15000")
    
    print("\n📈 4. 빠른 분석 도구들")
    print("=" * 50)
    print("# 현재 최적 프로그램 상세 분석")
    print("python analyze_best.py")
    print("")
    print("# 빠른 평가 (차트 자동 생성)")
    print("python quick_eval.py")
    print("")
    print("# 시각화 데모")
    print("python demo_charts.py")
    print("")
    print("# 새로운 토큰 테스트")
    print("python test_new_tokens.py")
    
    print("\n🆕 5. 새로운 기능들")
    print("=" * 50)
    print("✅ 25개 토큰 (기존 13개 → 25개)")
    print("   - 새로운 지표: SMA5, EMA10/20, BBANDS, MACD, STOCH")
    print("   - 새로운 연산자: MAX, MIN, ABS, LOG, LAG1")
    print("")
    print("✅ 개선된 정규화 (미래 정보 누출 방지)")
    print("   - 롤링 윈도우 기반 Z-score")
    print("   - 적응적 임계값 (±1.5)")
    print("")
    print("✅ LRU 캐싱 시스템")
    print("   - 60-80% 성능 향상")
    print("   - 메모리 효율적")
    print("")
    print("✅ 고급 시각화")
    print("   - 매수/매도 신호 삼각형 표시")
    print("   - PnL 차트, 수익률 곡선")
    print("   - 월별 수익률 히트맵")
    print("   - 시그널 분포 분석")
    print("")
    print("✅ 확장된 성능 메트릭")
    print("   - Calmar 비율, 승률, 수익 팩터")
    print("   - 정보 비율, 최대 연속 손실")
    print("   - 거래 통계 상세 분석")
    
    print("\n📁 6. 출력 파일 구조")
    print("=" * 50)
    print("results/")
    print("├── signal.csv          # 시그널 시계열")
    print("├── equity.csv          # 누적 수익률")
    print("├── metrics.json        # 성능 지표")
    print("└── program_info.json   # 프로그램 정보")
    print("")
    print("trading_charts/")
    print("├── trading_analysis.png      # 메인 분석 차트")
    print("├── signal_distribution.png   # 시그널 분포")
    print("├── monthly_returns.png       # 월별 수익률 히트맵")
    print("└── performance_summary.txt   # 텍스트 요약")
    
    print("\n⚙️ 7. 주요 설정 파라미터")
    print("=" * 50)
    print("--long_threshold 1.5      # 롱 진입 임계값")
    print("--short_threshold -1.5    # 숏 진입 임계값")
    print("--rolling_window 252      # 정규화 윈도우 (1년)")
    print("--eval_stride 2           # 평가 간격 (성능 향상)")
    print("--max_eval_bars 15000     # 최대 평가 바 수")
    print("--charts                  # 차트 생성 활성화")
    print("--timesteps 100000        # 훈련 스텝 수")
    print("--tries 512               # 최적화 시도 횟수")
    
    print("\n🎯 8. 추천 워크플로우")
    print("=" * 50)
    print("1️⃣ 기존 프로그램 평가:")
    print("   python analyze_best.py")
    print("")
    print("2️⃣ 새로운 모델 훈련:")
    print("   python -m factor_factory.scripts.cli_rlc_train [options]")
    print("")
    print("3️⃣ 최적 프로그램 탐색:")
    print("   python -m factor_factory.scripts.cli_rlc_infer [options]")
    print("")
    print("4️⃣ 상세 평가 및 차트:")
    print("   python -m factor_factory.scripts.cli_rlc_eval --charts [options]")
    
    print("\n" + "=" * 80)
    print("📚 더 자세한 정보는 README_ENHANCED.md를 참조하세요!")
    print("=" * 80)

if __name__ == "__main__":
    print_usage_guide()
